% graph tranformation

  rule subclause_infinitive {
      pattern {
        PP[upos=ADP];
        AA[upos=PART];
        V[upos=VERB, VerbForm=Inf];
        LEXV [upos=VERB];
        * -[FINV]-> LEXV;
        e: LEXV -[ADV]-> PP;
        e1: PP -[PUTFYLL]-> AA;
        e2: AA -[INFV]-> V;
      }
      commands {
        del_edge e;
        del_edge e1;
        add_edge f: V -> PP; f.label = case;
        del_edge e2;
        add_edge f1: V -> AA; f1.label = mark;
        add_edge cl: LEXV -> V; cl.label = advcl;
      }
  }

  rule subclause_aa {
      pattern {
        TIL[form="til"];
        AA[form="å"];
        V[form="være"];
        MED[form="med"];
        e1: TIL -> AA;
        e2: AA -> V;
        e3: V -> MED;
      }
      commands {
        del_edge e3;
        del_edge e2;
        del_edge e1;
        add_edge f1: MED -> TIL ; f1.label = case;
        add_edge f2: MED -> AA; f2.label = mark;
        add_edge f3: MED -> V; f3.label = cop;
        shift_in TIL ==> MED;
        shift_out V ==> MED;
      }
  }


rule chain2bouquet_same_label {
  pattern {
    e1: H -> D1;
    e2: D1 -> D2;
    e1.label = e2.label;
  }
  without {
    * -[e1.label]-> H;
    H -[e2.label]-> D2;
  }
  commands {
    add_edge f: H -> D2; f.label = e2.label;
    del_edge e2;
  }
}

